import mysql.connector
import pandas as pd
import numpy as np
import string
from fuzzywuzzy import fuzz
from fuzzywuzzy import process

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem.snowball import SnowballStemmer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix

def run_model(df):
    '''Splits into target and features, splits into test train split, print precision, recall'''

    # df['A'] = np.where(df['inspection_grade']== 'A', 1, 0) #1 is A, 0 is B or C
    # df['grade_numbers'] = np.where(df['inspection_grade']== 'A', 3, (np.where(df['inspection_grade']== 'B', 2, 1)))

    grade_df= df[['yelp_business_id', 'inspection_date', 'last_inspection','inspection_grade', 'A']].reset_index()
    grade_df= grade_df.sort_values(['yelp_business_id', 'inspection_date', 'last_inspection'])
    grade_df= grade_df.drop_duplicates(['yelp_business_id', 'inspection_date', 'last_inspection'])


    grouped_text= df.groupby(['yelp_business_id', 'inspection_date', 'last_inspection'])['yelp_review_text'].apply(lambda x: "{%s}" % '~~ '.join(x)).reset_index().sort_values(['yelp_business_id', 'inspection_date', 'last_inspection'])

    count_vectorizer = CountVectorizer(max_df=0.95, min_df=2, max_features=10000, stop_words='english', ngram_range=(2,2))
    tfidf = count_vectorizer.fit_transform(grouped_text['yelp_review_text'].values)

    X_train, X_test, y_train, y_test = train_test_split(tfidf, grade_df['A'].values, test_size=0.2)

    rf = RandomForestClassifier(class_weight="balanced", max_depth=6).fit(X_train, y_train)
    rf_pred= rf.predict(X_test)
    rf_tn, rf_fp, rf_fn, rf_tp = confusion_matrix(rf_pred, y_test).ravel()
    precision, recall = (rf_tp / (rf_tp+rf_fp)), (rf_tp/(rf_tp+rf_fn))
    print('RF Precision: {}   RF Recall: {}'.format(precision, recall))

def match_reviews_and_inspections(mapper, inspections_df, reviews_df):
    #fix this. it isn't working.
    '''Uses the mapper to combine inspections and reviews based on Yelp business id and county permit_number
       Returns a df that has a row for every yelp review and specifies which health period
       (should be jup 4)'''

    inspections_with_yelp = inspections_df.merge(mapper, left_on='permit_number', right_on='permit_number')
    inspections_with_yelp.sort_values('fuzz_ratio', ascending=False)
    reviews_df['yelp_review_date'] = pd.to_datetime(reviews_df['yelp_review_date'], errors='coerce')

    inspections_with_yelp['inspection_date'] = pd.to_datetime(inspections_with_yelp['inspection_date'], errors='coerce')
    inspections_with_yelp['last_inspection']= pd.to_datetime(inspections_with_yelp['last_inspection'], errors='coerce')

    merged= reviews_df.merge(inspections_with_yelp, left_on='yelp_business_id', right_on='id')
    merged = merged[(merged['yelp_review_date']>merged['last_inspection']) & (merged['yelp_review_date']<=merged['inspection_date'])]
    merged = merged.drop_duplicates(subset= ['review_id', 'yelp_business_id'])
    merged['A'] = np.where(merged['inspection_grade']== 'A', 1, 0) #1 is A, 0 is B or C
    merged= merged[['yelp_business_id','facility_id_x','permit_number','inspection_date', 'yelp_review_date','last_inspection', 'yelp_review_text','yelp_review_stars', 'inspection_grade', 'A']]
    return merged

def make_mapper(df1, df2, address1_column_name, address2_column_name, name1, name2, fuzz_thresh=60):
    '''Matches Yelp Business IDs with County Business IDs based on adresses and names
       Can set own threshold for fuzz ratio
       Outputs df with yelp_id, permit_id, etc.
       jup 3'''

    stripped_df1= strip_address(df1, address1_column_name, 'stripped1')
    stripped_df2= strip_address(df2, address2_column_name, 'stripped2')
    nonnull_df1 = stripped_df1[stripped_df1['stripped1']!= '']
    nonnull_df2 = stripped_df2[stripped_df2['stripped2']!= '']


    merge_df = nonnull_df1.merge(nonnull_df2, left_on=['stripped1'], right_on = ['stripped2'])
    merge_df = merge_df[pd.notnull(merge_df['stripped1'])]
    merge_df= get_fuzz(merge_df, merge_df['name'], merge_df['restaurant_name'])

    step_mapper = merge_df[(merge_df['fuzz_ratio']>= fuzz_thresh)]
    mapper = step_mapper[['id','facility_id','permit_number','name', 'restaurant_name', 'address_x', 'address_y', 'fuzz_ratio']].sort_values('fuzz_ratio', ascending=True)
    mapper= mapper[(mapper['facility_id']!='FA0082600')|(mapper['facility_id']!='FA0008423')|(mapper['facility_id']!='FA0004910')|(mapper['facility_id']!='FA0004969')|(mapper['facility_id']!='FA0005087')|(mapper['facility_id']!='FA0031638')|(mapper['facility_id']!='FA0031679')|(mapper['facility_id']!='FA0006336')|(mapper['facility_id']!='FA0060862')|(mapper['facility_id']!='FA0003331')|(mapper['facility_id']!='FA0008867')|(mapper['facility_id']!='FA0009125')]
    mapper= mapper.drop_duplicates('id')

    return mapper


def get_fuzz(df, col1, col2):
    '''Calculates fuzz scores for each row of given df on given columns and
       makes new column titled 'fuzz_ratio'
       Jup 3'''

    fuzz_scores=[]
    for i in range(len(df)): #improve to not loop like this
        fuzz_scores.append(fuzz.ratio(str(col1.iloc[i]), str(col2.iloc[i])))
    df['fuzz_ratio'] = fuzz_scores
    return df


def strip_address(df, column, new_column_name):
    '''Strips non-digit characters out of a column and appends values to df as new column.
       Input should look like strip_address(df, 'column', 'new_column_name')
       Jup 3'''

    non_dig= '''!()-[]{}abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ;:'"\,<>./?@#$%^&*_~'''
    stripped_address=[]

    #this next chunk needs to be improved :|
    for i in range(len(df)):
        name = str(df.iloc[i][column])
        no_punct = ""
        for char in name:
            if char not in non_dig:
                no_punct = no_punct + char
        stripped_address.append(no_punct.rstrip().lower())
    df[new_column_name] = stripped_address
    return df


def get_yelp_data():
    '''Gets Yelp data out of SQL database, returns 3 DFs (business, reviews, and categories)
    Jup 1'''
    cnx = mysql.connector.connect(user='root', password='root',
                                  host='localhost', port='8889',
                                  database='yelp_db', unix_socket='/Applications/MAMP/tmp/mysql/mysql.sock',
                                  connection_timeout=5)
    cursor = cnx.cursor()

    #Gets business info that are in Nevada
    bizquery = (
    '''
    SELECT * FROM business
    WHERE state = 'NV'
    ;''')

    cursor.execute(bizquery)
    cursor.fetchall()
    biz_df = pd.read_sql(bizquery, con=cnx)


    reviewquery = ('''
    SELECT
    business.id AS yelp_business_id, review.id AS review_id, review.date AS yelp_review_date,
    review.stars AS yelp_review_stars, review.text AS yelp_review_text, review.useful AS yelp_review_useful,
    review.funny AS yelp_review_funny, review.cool AS yelp_review_cool
    FROM review
    LEFT JOIN business ON review.business_id = business.id
    WHERE business.state = 'NV'
    ;''')

    cursor.execute(reviewquery)
    cursor.fetchall()
    review_df = pd.read_sql(reviewquery, con=cnx)

    #Gets categories for businesses that are in Nevada and are matched in dataset
    # catquery=(
    # '''
    # SELECT business.id, category.category
    # FROM business
    # LEFT JOIN category ON business.id = category.business_id
    # WHERE category.business_id IN ('rUv5UqvD7d-HMV-Ib1jaTA',
    # 'M30I1NPl5JuHthxo1IXPGg',
    # 'fDpiXePaeKqbOfoxXxUKyw',
    # 'xJzJpTYC_1k_EE0AWTOPXw',
    # 'm51uL1LZhKYf2y_yG4NEng',
    # 'HpK1ILGUm5W129toiRSsXw',
    # 'xcL8PNpRygalnejv0bp1-w',
    # 'y0x795PyDX8JL_oyIaTUiQ',
    # 'AnXovUgUHJap3QaDRnjL1w',
    # 't7Zsr25NK1NlXbS_2CYc1Q',
    # 'O3y-5O1n5l0ge_6KGyR_4A',
    # 'rtT7RqERpHbRYOiTIgGszQ',
    # 'qB0WAMveyK2-3itLPOiqVw',
    # 'YXdriiIKA4b1nQiRQ4XaDA',
    # 'G1lB2bUf1MT1FZT8TBy62g',
    # 'm7u5k3-_6WGOwLaVznCKKQ',
    # '5QsW4RdCrDhVuDHnlgnCuA',
    # 'MQu-unZeJadbVhN3Y1vyuA',
    # 'aSHTlWB56c3bWOsRDIj_Hg',
    # 'eszo5NGbX8Cn2gfuUj3gAQ',
    # '_VOWg7uFcJUxMpQpi3SoQA',
    # 'DHUAQ4pzH9KKzGZDm1jZLg',
    # 'Yk23uco9_lru4frmDe8Krg',
    # 'SzB85-8tmDEvoapZSDTBkQ',
    # 'mOW2adAwuFSMHXv74psg7w',
    # 'UXauVhawknwlatK5SN87yA',
    # 'lym9VHmU2QupopVsMGt7lg',
    # 'z-q9WqP8-hnBNp9LuAsbkw',
    # 'Z0CQ9oJySxJpB8RbK6NUgg',
    # '3WRvQJS9GIBubGxbHMzX2g',
    # '-FNquqGseSCVMWo7KbK-Tg',
    # 'jOWS7K-2tNqOcHVBSygswg',
    # 'I22wQGTkLFGn6jTOhwoecQ',
    # 'phTLTkqSvylLkmz5wAwhTw',
    # 'cHAhW7XJ2no_qzc46HpohQ',
    # 'ZTCKRVCjdcb2eS_-260O2A',
    # 'QqE0ECLim5hA-sV-kJiIIA',
    # 'sxrubytQT4TvSZJRDCAavQ',
    # 'R02kqbyReG035LSZucFbGw',
    # '7dHYudt6OOIjiaxkSvv3lQ',
    # 'Q-HDnjHCywb65thAB-f0nw',
    # '9SHoWGXsGOCa5hOjBOzPtg',
    # 'rYVIEEW5O3ZUKCqNg1hiNA',
    # 'Ory33UEFnbnvdOO4UTBaFQ',
    # 'ytYtMuk0URV6tk9m0zhDoA',
    # 'Wc1i5QsTKheJq6lstPAllA',
    # '_-QrdVYJbebaC2qschZ6iQ',
    # '1jdiIc69VElLkloLKY0RAg',
    # 'dbOyrP0eTEXyJTVieTrUZQ',
    # 'KaMyquyhYKsZ2Tr6YetGsw',
    # 'mnU3iGsL55MCWXiWV3AcAQ',
    # 'Kbbm6Vd5UdbP10dwjBghRw',
    # '0yjLZZx708uJbierAonqQg',
    # 'AhAuNIkWtht0Fq4gEJzodA',
    # 'XpB1GKENtgaaO4KoV-uswQ',
    # '3ajYl6uAIpk6-GM6fvokxA',
    # '8Yz1eFsaUy-ny3B6YZDOrg',
    # '2pTq2dbPsSQwQJWUH5tE-w',
    # '0iPXuywgu37dDpwLMudACQ',
    # 'zpXTbidP23E8Yaxyh8c4HA',
    # '5tTKSogU3fWO7TlnYrffbA',
    # 'kvxSYzWonG0Gf0TlOF0nkA',
    # 'JPJv82VJabWUDraSg-gRkw',
    # '-YCd2_DdJUeZx3RRcmIZ_g',
    # 'izvmwI3kSYIt-a6vA4gUMw',
    # 'jAgNdPqhWBXuz-QOqHEVfQ',
    # '94mQ3aJ2xjP6W-CV1j8cXg',
    # 'GStieDpK7oi2pXggQXi-Kg',
    # 'nWuomYtU748irUOWo_xohg',
    # 'ahzHzyALM4ZCEVRrs2KejA',
    # '8whaol4NzTlIgROeShwBWw',
    # 'KY5-vGUZhDmDi1ieXRUmmw',
    # 'Edc4OQns2A4lqs1KT3HE-A',
    # '5rPcuMOjSbKPuYzVLsstQQ',
    # 'cJ9BqupaJVeCTQQBWA3PAw',
    # '3yhdmUXeZS5j9xZRcuIv0g',
    # 'D9unP0Qn78z5HkaeT4_PTA',
    # 'oDcTa97TuRsNVg8urdw6qA',
    # 'kXl44keW3wZaJpjEqHk30g',
    # 'OujKSxiOcpYX3zcsKVhkqg',
    # 'TjZo2v8i7d4omCovsFA2pg',
    # 'RLLROsucXi6-E2k2Ty-Oag',
    # 'uR_XKIze2zILS2Fjal8xmA',
    # 'xxYsX6Gj0-pj-kxKw092LQ',
    # 'V8L_OyZD1a_4FXZcRilDHg',
    # 'UhHZOFwOgnPsoC_n1rzrsg',
    # 'D6WpqR9w-Suwie5wbD7Cmg',
    # 'qcltTph9ALOpiljbwMluKQ',
    # '8f5JVaK2mZCu9lct23dhtQ',
    # '7GfA5WMSRd-JCaPxnwgIQw',
    # '2zPtma1ajsJlrXQak98TlQ',
    # 'zEd3Ex_k3vHiBbBPWRrO7Q',
    # 'Wyc49dq1r5uMqBl9bHVPAw',
    # 'tsYriuDpdtaTju7LUANDzg',
    # 'kpLt4l5J5kbMD4oxQLC2aA',
    # 'V6Od7XYl_PznuG19DPfTAQ',
    # 'HNEhE83F1X6kN7BKVmR_9g',
    # 'F4zZX3Fr3QCtlHCKtsOkFw',
    # 'zOhc6cRn1UgNy7EiAdJ2Rw',
    # 'D6iaNp68eH0LFx5H1vWBCQ',
    # '-FlrlELIGmCqdt_JxbdFgg',
    # 'kj1KQgC-mCRV4vYZlWitzg',
    # 'q7aNYIUEkmisLTE3qBPRog',
    # 'JF26V4OaZNTJIaDL8950HA',
    # 'ZVGbouYqiY577WGCYZJbTQ',
    # '-EohS3nXZGl6odE9Lx5BSw',
    # 'r4ZWXDKCX1K4_ZrZJZpkUA',
    # 'uydiNFpCd1wUkLdRRQp3uw',
    # 'r2vAwakuF7qXNtQDuMEFpA',
    # 'qParPpAesanzrvjhFV0PdQ',
    # 'DDs5YMhAjnP6oA5-eGw_TQ',
    # 'xHEqgRS_p8ZE8GTgcJc2Hg',
    # 'xd3RB4q2Ermmdz41i7RWuQ',
    # '9ttdN9MIS1j9c8Hp5TmZnw',
    # 'TDTASGFy_aGp6vy0i23mDA',
    # 'ff6B-NAhNYnDFpaKziDBJg',
    # '6Ege_N9uJ-rtKIs1TNA8aQ',
    # 'Si69ECHUu28iyEtgZz_EBA',
    # '14hYbBTN3_BqmI1rXbfpbg',
    # 'yMPm1_DbVYVGzetrZ8EfuA',
    # 'lQuzqmiE4bfZb19mip9uPA',
    # '0uR48n5SYcLE_DLcjONZPg',
    # 'bU4pwOlhicUKtPfefTGMQA',
    # 'yZIA98HUgPYx4BY8iZr3IA',
    # 'OSxC4A2g8fVn2XCH18FmAg',
    # 'AN6HjBZeEcLgekQawgmS3w',
    # '9A-SbsQJ9efK57oW3GsAlQ',
    # '3CxiP8n7DAL-YOOTCW2wNw',
    # 'lNL6pXU3qU4RD87_9RQxnQ',
    # 'LbuqxpaUIVEhC4mCvecjRw',
    # 'rQhSytWZ2vhzsfzBW4fKgQ',
    # 'r-ODPgzrdDGIzxmZl4iwiQ',
    # 'onC6LNdf3HIwjB6LqMjQxw',
    # 'q1tKmIMgDdBGwLzcuxnmtg',
    # 'Jwwkt9oAKsNF4AuItTIdPw',
    # 'ZVetFAAt0_j0tEqiakpecA',
    # 'uUlq6chIVb0I8AehlET5bQ',
    # 'WifBAENwZVGlwCMYchBG3g',
    # 'MshSy-b-4qY5zdFioUWuzg',
    # 'ttsLdrsKe24vXZcmZXcZ4g',
    # 'ENSXtagSYILMBTVEj6p81Q',
    # 'Ei21gZXbsXbJlWL0QxLVzA',
    # 'UrhPr4uPoqKrYVANaroqgg',
    # 'UbjXRe-Ku_MWpX27vtIEFw',
    # '5K5Fppbmvsw9znotxVOXng',
    # 'IdaI8orCy7pyu5mzEHaCVA',
    # 's-QHEBYI2c2VuOQdEi0qPQ',
    # 'e8aRJbv2EMH5DqMzbDK8wQ',
    # 'eNrBPQA92s7ckh2FOWi8Eg',
    # 'HoLRI8TigyvNfIHdQ4ChDA',
    # '8KlImDp5zaxdbtjV6_El7Q',
    # 'rd8NXOBTsASiXriuooki_A',
    # 'PBghJox_ZpSSa2nWyYuxpw',
    # 'nvh-zGYHKwIUiPTgwhIScA',
    # 'Ekxhn3gyMfoXslnVxhZn3w',
    # '4UmjnX46qbhV6-D5W89IOQ',
    # 'diwRPVKeYiUJ9tqlr1orAg',
    # 'bEJzJq-aeuXYDThZnF0Mgw',
    # 'qLO9ES3-mKJrodFO1mzgOg',
    # 'WiWJR2WrC2x4_2sZ6p5czQ',
    # 'Mk5cLRjt_-ChToTtu2Hefg',
    # 'Gzek9CZGUVk-SEqqNgBHTg',
    # 'DiUgFZkt88xcDWG0OjjCaQ',
    # 'RsulP7fZ_36iBhElfKFjAg',
    # 'YMc2n7R4_6N0PIHIfUJqPg',
    # 'eZsvH0PfIlFn-qL486Bj3g',
    # '6qP6R78nlAGSahx78DayHQ',
    # 'zW0a510NN0P2n4tqKeIRBw',
    # 'LxnZTxUoj063tbJaLQ7DHQ',
    # 'm2AEBwg1b0VlsC3n-wqxIg',
    # 'Qp1yR-BkpsmJZHRVw-2dkg',
    # 'm6DuuvI95KyOZpUwMvP20w',
    # '6fKmO2gzGQhzM791H6b4mQ',
    # '35tWXOOJpWB2feUAEJyJyg',
    # 'zhB2gbdNbaFwo2nWEArtLA',
    # 'iiz8ax8iMkEa8u_JUoFiGA',
    # 'dPqbKki9KBSFjxxLj_urwA',
    # 'masGHio29MlENLa8vqUqOA',
    # '2pcrNqDnsFd6UCelOriVlw',
    # 'GsaNBwJycUb6-MuFSYN5BQ',
    # 'FYddq7fUtzobZcw4jOJgVA',
    # 'nJa_BdlXhDenFnnYlW6DyQ',
    # 'x-HiCsQUNdtbghzW4_ra2Q',
    # 'T00dMi_gQdyQkE9GKJFVSQ',
    # 'V2owu-O0rrlsGup3FMz2qQ',
    # 'hySFMXFqyb7rNuxS8koNrQ',
    # '_yAYxyEBMIbqFL8pubaf_g',
    # 'Gx1i3fXHzKkcPYrxTCGeoQ',
    # 'D2EDuQwOHp1OdGUNsFzKMw',
    # 'ktCm0r4-oVIHfjcqB2-tFQ',
    # 'zx1iW-K5dR1pI9PPs4UHwQ',
    # '7-orNjFM9FDNIhITbr37wA',
    # 'VYPovuzh6JwTxgEdkb9XLQ',
    # 'YK-mFJIiJIy1JNamhijeZQ',
    # '81wSXTjyBc3iMeJYWdiIkA',
    # 'JWN22sQ7cl9KjmIk0nMbUg',
    # 'gqVHoP4noz1EAa7nhHLk4w',
    # 'On8O41uCKj1GfF1Bt4S2Lg',
    # '0Myf2fOlXXNHgIuPZoOlsA',
    # 'GdnLwnezKcZwoP-fnVtPNg',
    # 'A4yJu-Nq1n6nuLP6QKZkrw',
    # 'DugcfgyM4DhDldK_jsF0Xw',
    # 'XIcq5zKaAkGSN6cIJzBKRQ',
    # 'Rs1P2TXhuieeVQCsmInh8A',
    # 'QoKn3zRpDrBj3hCPYGDCSA',
    # '_paJE9yQfSvo25BKBQrKZA',
    # 'JM9LVlM_o3k_CbCErIQYAg',
    # '06MlxbtB4ZYeg_ri02RIAQ',
    # '1gjhtfYxlN-0xjS9Xdh66g',
    # 'lINk_EU_elY6iTrfUGcRqg',
    # 'j4nX7yJFULEXXjMKBLwDLw',
    # 'jKduhy-gJ9hyFzd1au6pOg',
    # 'fnH1vGokCyM7rxAEOR-R0g',
    # 'dQmXfa3MoC7Encv9XVR14Q',
    # 'gbsDvIBVQtVTpzUUzlE3GA',
    # 'YV9GVfmDSDM7HSV0jVdTOA',
    # 'SzhD5J80IhpyeBftzQ950Q',
    # '9_qI_MCXaxUFfiArlHvGIA',
    # 'UED302E-B2OyVr0mssARnA',
    # 'SNc3-bV7preAPifzE4asNA',
    # 'wLCFUsUWF3hhGKdHA3BqaA',
    # 'axfGq2ooUSB9MpL1RQTmeQ',
    # '_blrEZQZ6et5QEUa-a2WLg',
    # '5j7BnXXvlS69uLVHrY9Upw',
    # 'nUpKKVwG2WctMOXux19vew',
    # '6PqYwabO2g1r2ZB7eImOiw',
    # 'W3ia8dkoGGRYEfFg_BiyPg',
    # '87j14nON0RPB9DSkcWsF7g',
    # '0aw3HbxkZ4G7pkPYt10fhA',
    # 'A8ZXAfU9AM_s3ZWHu_HVFQ',
    # 'rvXg_6hRMYc6b5brLLBSxQ',
    # 'N8ArHOgRDI8wOJIOZaEHyg',
    # 'QJcJaqhxFGaj0V6rRWupvA',
    # 'Cm-BH_7VPLP63FdI9ML6vA',
    # 'mnOjzFuPJ1YGALDeNDdP8Q',
    # 'zPV9RXr2U_TejaJfgBdaGQ',
    # 'gHoP4eJimaMltfUlp6EP4Q',
    # 'l1n4MY7a_O2gif573lRWTw',
    # 'Y7T9osP-hoqp2nLnmIi12w',
    # '-mN7z9oY01Mh_-dwTyzpqg',
    # 'qG_WEgPa8MBo1dPUOkTMlw',
    # 'sjpYOSE-cK0h-XI7XooLTQ',
    # 'sghGLUOAC_WGEWmv-mZReQ',
    # 'slYb2NfWI5wLCeV67fWGKQ',
    # '2smgOPhpYbDT7G5tbVRdiQ',
    # 'LFhF2la-C_vrNrQRz5GnIA',
    # 'HUr7xaaplZQ5jxb_zF8ing',
    # '6OftN85zwsd_PRxSYhgQCQ',
    # 'TyikKXcjTFmhyFizuaU_FA',
    # 'YODpEX6xACHoERsIol4-gg',
    # 'L97gcZgV8Cm9-MSuAanO9Q',
    # '95ASq_FH5hLT1bA3fdISqw',
    # 'r5Ps1Ir6xzJRMLmCWiBXdg',
    # 'jkCkdlxISVraP-tnTsgOvw',
    # 'e1qIWEYgYjTJG1zHr4rwxg',
    # 'MIeVxFe29Jl33reMYewacw',
    # 'ZeUwYKjJ4Omazc9hhLIfUw',
    # 'S5HvZ_TUvt0B92LMV_lImg',
    # 'CJJ5X5qtbLTCJmQvhVC7kA',
    # 'NGp1HTYrPg3pMP-tXeLf-g',
    # 'k-YxoQSyfIEPcSHu1cyBhg',
    # '7ZPMngvH89iNF0RzFiIEqw',
    # 'UY9t1EL5PYxPiBGivkeE9Q',
    # 'pp8iXohJLmVLzAtiBP4ITQ',
    # 'BHLHawbaMIWv7CCh0oXvAw',
    # 'qphdsRyyXIF5zteq4od2YQ',
    # '4AN-FivUM3Qta97OZQYCkw',
    # 'QCITNjr0BnHVF7BkoN9Zig',
    # '41qxBQnPkMZ2ODeACQ1BBg',
    # 'niuHdk9fwX0IJG1zMAHcig',
    # 'KVwflracbADEUzLn1wTEKg',
    # 'JucrAcz7BXWEUi5eYI2g3w',
    # 'HqyAd-xCZxnJb3IlHCfL9w',
    # 'EU8Hp2rTEptiwCH4eLYZBw',
    # 'duCjWA3EBSA-ox5LTcXbwQ',
    # 'DP-o7QBOf5BhZZBzYWjO_g',
    # 'cwyGmQIRSH-o56GKfyRNvg',
    # 'KJh5KPzZ9SGx7_yPegsJAQ',
    # 'wQSicJWLRoZV5BKWK5YR0g',
    # '18sAHGZz-WCAFqmMNqscVw',
    # '5Is2e7xYtaiTEJ1dLkGR6Q',
    # 'DKMgezmOf7tR_t74sBjBhQ',
    # 'Ws3AWw9WPWDdpUQjhkXcxg',
    # 'EVYGEs6vJwUPvapGPrKvfA',
    # 'RMIZvXChyfDWzWbNOK0l9Q',
    # '0Rk-wEBuN7LohaP1y6VHfQ',
    # 'jxlFEDBb4-ntP_GDjH3WLw',
    # '25uxgxlqp7sW5F15wguyIA',
    # 'mFqRAO2k3xoiSOEz-Ek6Ag',
    # '7_F6dA9xh2lydTtr1LCtIQ',
    # 'xlxDYmBKcxivtawHudutRw',
    # 'pZheA6S-JPT7v_H444D3RA',
    # '-LMycE26AortJDsbc8oXOg',
    # 'ibhjOdswOPhnp8ReUywnEA',
    # 'AAcaGYggq4RBbFdEueB2qw',
    # '1T1E5g1e-94becqAzvbLDQ',
    # 'd0N5HcdMCeXcX81hcRVUFw',
    # '0o7Z0-YSP5EVh13oD3aJXA',
    # 'oJujreJoOoskuA09JJ39FQ',
    # 'E-pUHcZaIzFQbnWnGHcC7w',
    # 'xI8O5h3Pa0MQlTWf93noTA',
    # 'ptiTZuUff6I-OgnfSD3Urw',
    # 'ccd6w9w81PUBmtV1DFXgig',
    # 'suLXZUWsh53kzoTVnO4gng',
    # 'QtExrfP_dW-Yhs56h_NZNw',
    # 'KXO9aGAOWAJEmHD_d8yQ7A',
    # '27oxCPhgCaylA0U23r2O2g',
    # 'PFOPBxMDFZM0vFrI5R8txQ',
    # 'k0vkHxJTOex5GRpcznaayA',
    # 'cDmzR6s9Es1kgYF2Wrlt6g',
    # 'roA-hNugvAwiyVirIFH8Aw',
    # 'qORxYunpxPCLetViuZUXSw',
    # 'ktJJMphosVXddoLGG9xR4A',
    # '4v9nhZ5h-KScIsG7uXjfzg',
    # 'h-1cbSCEMQlf3ampVX6pLw',
    # 'uu_x0WbrO1kROIes79aawQ',
    # 'njvrJ45RWohxGy50HRYPtw',
    # 'dmTP4Am6wKrxwHrBdmFsQA',
    # 'dqtWVr1WlaQcmPPCrmZH3w',
    # 'PAcD5cYk9yFtgUYvejaVfQ',
    # 'RJmPD7n9xLu6uQpzA5ErVw',
    # 'Hu4982iLVNhBy3HI3s_22g',
    # 'meIoY_9NhN8ttxL7ZcpEYQ',
    # 'qZQI5SSqreUqVHl8i8JwOA',
    # 'x78iqNaO9FvKTN5YYXDZFA',
    # 'fvWMTH2uMQXIvWSFf5wi4A',
    # 'QC9bLPcNk6ymAOHf03pHhQ',
    # '4SWx95nlvFKzI9uzpQ6wjQ',
    # 'gduTP-ujJ89tWOSdb3WMPA',
    # 'T0NKethAB-FFR05EeZCzuA',
    # 'WlTeMP8p3m1b3LxkfBllLQ',
    # 'kANF0dbeoW34s2vwh6Umfw',
    # 'wcE1oKRQyi__19LH5WOszA',
    # 'd9N9po3OjG4AjyxOylFnmQ',
    # 'IGEy2RbKHrQrZAaofec5jw',
    # 'xpAm-NN8JQbL5JdBal_Ptg',
    # 'puaFlVmeV5xsb9IdiqjC7w',
    # 'QyyDWCG4Z7z6fHYFPQVFnw',
    # '4I4OoW0tbaoG4I4D2spF3w',
    # 'reMD4XrJSJ-bQ185AmZL3A',
    # 'XBcy5493AsrFs0KyWvUh0Q',
    # 'kkD5pal9rRzE4PjeYSL9mA',
    # 'nteAMOsI2DsTTR9v6G9E7A',
    # 'IXH_aorv1x88UfRZrYDz4g',
    # 'R2nUVNPdPuJBs5tqCCld5A',
    # 'UXkD2CbW8BnTpYyUTsrCTQ',
    # 'yYkvonvBGZB6UMnpzr6Ryw',
    # 'wNI7ys7fe58Xn1TnM9mFyQ',
    # 'YNUdy-W_ZFO9B2SZUKRrPw',
    # 'tgXiIcCoKYfg-hm8yLxenQ',
    # 'HXCCITejNvcqtjNQRHnMPw',
    # 'kfwUp_dHWKpRdQWucy0ykA',
    # 'd8n-iKS5_iiB8-qPT7MezQ',
    # 'lHHT7i2Cz0hGAASI2it3MA',
    # 'GY2Ft91pI_JUnR6EfdE8TQ',
    # 'PWWuvwKa3sUnBIjTar4dEw',
    # 'wxaL2gVWUHaD2C1ey3W8jg',
    # 'MJVFfOQUMH2iUbyCLAaqnw',
    # 'ySBvgchqN-sJmvUQVcTpnw',
    # '6gxlDhmZ80bhflm2A-U0KQ',
    # 'OM31QC8tyTOXZgK0FDz_hw',
    # 'vUYz-JgVTAtUGUbQuF7czw',
    # 'BIBWGO_r_1znnlmLbp4Nxg',
    # '7SLZwNRhc2bpUXQXLypTTg',
    # '7VWtmHsd4HSNDkF5f5xnng',
    # 'Ru09o7KDyRyRX_Le3eHjNQ',
    # '03Yt7kMeYihN_y6ptiXxyQ',
    # 'sjO0HUb3VdYGQdHxrTnKUw',
    # '-n1g9MdeG46v1-gzZ4ldvQ',
    # 'lnXyGlVjxSryGqyAFcUUBQ',
    # '4UQtSydgZ0-7peghGCb-eg',
    # 'Yqvy3vnaTrOXRWV2tMX4lg',
    # 'fd6iX0qDBTX51IwFJjh1bw',
    # 'RyaCGkXRXxXNeJhbnioz1Q',
    # 'nupAsas-_hc8225O_5APMQ',
    # 'viFP7j-WLzVhkCFXWGWQDw',
    # 'O1ei-QBkQT-Kzlp7SxWgVA',
    # 'tiQaMQANujvTYbFLyADhFg',
    # 'ItXbD1tIOg28WvucEybi-g',
    # 'G1xNLMm0qP9juQgeo64WuQ',
    # 'hApq5kMwYfbaCorGiqpOgQ',
    # 'KjyLmvNLUY2Q5fHHc7sX9Q',
    # 'NiQ_3tXqkoe6GaQ5w2sHaQ',
    # 'MYYKPJMRctb0lI8WK5tDWQ',
    # 'lDwZKo0usofBTfhYrquhDg',
    # 'Kpkp-GrhL-yUHMOtg0deWA',
    # 'pf3kPNPGA15kggbgL92UXg',
    # '12P7GjIoq6oj7qCyJ_c0Ag',
    # '-INdswGdyRyy72xXHalNbg',
    # 'RviFIWLt7wUCDYpbMO1zWQ',
    # 's5o2gAlIk9gX-otfiUpFgw',
    # 'vYyXDGiD-NrZDI7vgWzzgA',
    # '4jUj7xHIhdHpTrb0ZXSToA',
    # 'mjhwLcuoenVW8oFhcNmlHA',
    # 'st_faQOKk7H2FwFqn0t3Wg',
    # 'TZkdlMxELR5BVajnjAaFmA',
    # 'aKymOxfEj1zSumS9wi8zjQ',
    # '5uvX6yqie9DpHR7UAiQZtw',
    # 'agySn0Jacnul-OiiNV8Rrg',
    # 'J2nCJBrGn4EQT1abnBHaUQ',
    # 'Wpt0sFHcPtV5MO9He7yMKQ',
    # 'XydKWBaKYDO2BFXs8pXnbg',
    # 'FTDle9JjFPesq9A0RwP5Ig',
    # 'eJECvXFIUnfcDE6PzKS2Yw',
    # '1u7fJVL82JEznv76noobVQ',
    # 'Lv7T_OIAX112_Xio5cPbhQ',
    # 'kaFItSnFuTSpmohv2jDbrQ',
    # 'sJ8B4Lq6AY-m5dzIbDNgyQ',
    # '9a9xBjlW2RxKxD9RMgmcuQ',
    # 'slL17UfoaTEy2dDt7u5HbA',
    # 'eb31LLI9QhMbtjBlkyx7VA',
    # 'Tl9dhHhmJBl6PGSVk-OpMA',
    # 'kB1S2GJUjE2k3XN1WQS9tQ',
    # 'TBOSDL_6fjIE27b8hB935Q',
    # 'viry1tKdw736ZRBeX9UB5Q',
    # '9R2UXiCt1DgV8Yhm3WX2KA',
    # 'mfQfNIb3TYeBSxsN1WD8eA',
    # 'z_1n_57ANGutdEnfbWpTGw',
    # 'cIRhIB0bXGYRijNMdOMomw',
    # 'Qx36_lVL-nPThPRzk9VGag',
    # 'SqVIolLCBmQYyKeai3pCTg',
    # 'fg_KGtLwAw2IpXin0KdAZA',
    # 'ZzERMgdUTkAeFKZFDwPh-A',
    # 'XBIgiDL_sXYOroaX4ULaUw',
    # 'LBwFjTUlDeikknOoQTXxhg',
    # 'kxYiZnd7Y-3ibdwnMFuTzw',
    # 'vGLl5xum2u2Qf8_AvzSenw',
    # '0N7ME2xu2Y_rYn5ID7SWcQ',
    # 'CHW_DPKnTqudyRaDa4vwkg',
    # 'Yq92uUpugGyJLvDtcDRunw',
    # 'mL9sLXHeA0q7aj8-BXXq4g',
    # 'vHIUZzeWg7VxL9Y-hrE43g',
    # 'DDfGmZ07nTAR579uCd7gzQ',
    # 'rECgTdKelvefty5JIXHDbg',
    # 'w65fn1RFtNWN5LPZHrkFRA',
    # '0imWty0eKpz8YpuZAKF83Q',
    # 'pnh3Tfk_hJIraCEZwbhSTA',
    # 'xlJqe1gSZz9C2-87mRA8TA',
    # 'llPgXTDX8NAEbh80-wGzYQ',
    # 'i0EtEzlEkOho6YcLG29bvw',
    # 'ajwGl90CuCZac3BKWY1ShQ',
    # 'yOvl22iVeqK3_EJbu5Qpaw',
    # 'hm5Tgbj-IWQqe-ImqnBaNg',
    # '16NS8EICI94IGdn-S0yxkw',
    # 'K6ysT5cU-5b63cgk78vIdw',
    # '8Aswo1-FW3_8PKVyM_oVQg',
    # 'ZYkAMs9UcYuwaXSiGczSkA',
    # '9dz6ZYUDCqtD67LSPTLApQ',
    # 'kOmOLm0dLPWL-AeqFfoOkg',
    # 'WM33kyvA8XfiL8lk2I2vcA',
    # 'WSzgJ3h5CxfvdguT2AI-WA',
    # 'uWrrQ8Rk2uM2WqPMi7EDag',
    # 'wZj7Z_cvC_14fE885TIqoA',
    # 'mKNzA_CjO3NXcCn9RphHiw',
    # 'TdOErkVmRTu1Yerz8-g-Yg',
    # 'M4vh_kzppP1nsxo7hsaVIA',
    # 'TiGr3AQ7CQoBBU6oE-j03g',
    # 'KSRBPWOSqxclHkDd23P7CQ',
    # 'ZDoXr27YooSll6FTD36RkA',
    # 'leZNWLccyBaXpPIRPK_lsA',
    # 'seSxUrP20emweQGA-Ugm4g',
    # 'v1ZcX46_bS-9foXvxWsxLw',
    # 'jv1sbEWUJRHeUff1xZtqWg',
    # 'lmNpuLiA6Jtn3lL2Ec43Qw',
    # 'vNzbhJ5SeSK6jo_WzrMVag',
    # 'dbKnvc3eAugC-vRxw03Jzw',
    # 'Fho2P7OP80-yChCRxkK7Hw',
    # 'wcXqGgZDlnyEyEmtEZ8-zw',
    # 'YK5eFV8uS1bCmp8GeiQ-Qg',
    # 'ujfIrNpNM9D020nPL4znRQ',
    # '1SqLPgnZEVeVYDM-AuoFhg',
    # 'vykG2Z1P2tMswAL67mFpsA',
    # 'KvFjvYiagu-9YmcJbLd3Ew',
    # 'mrnUt3IdLRf4j8WeeGGbpw',
    # '6kkxRV8H9SQLybj0xnEbMw',
    # 'pR2_GYu_6CQ3oBdw_Fux_A',
    # 'UoqFYkm33J801d3v6Pp5BQ',
    # '2zrBUJJG1FqZ3X03w-OqIA',
    # 'qsEbriXbvQVaORyJSkCEzQ',
    # 'taaYWCkUulZL56qZmS1VzQ',
    # 'OTTMrMNcCrwm73h95d0gPw',
    # 'nqScdFlLTUO1PlSUQR3yjQ',
    # '5qyVOOsTxMdEByXVkH6LQg',
    # 'oviLltn52sIFHcClcT-BNA',
    # 'Ko-c15eutBBh3xhQ_NiauA',
    # 'PSUOncuqfqHulYj_fusthw',
    # 'erfeEg2sOOGRXYfLIM9BvA',
    # '3wE7IZEO3kdFSIbrEh2vyw',
    # 'd4Myyrs6t2848Pe2p8IkCw',
    # 'P5TLch0Fu9p3o6W2hRSz0g',
    # 'irFNlIpKYgmwtyHm3MN2fQ',
    # 'FIhNVl-AFxrjb1-puoFF_Q',
    # 'NlpsCKu8FiGo2BvZSZdpFg',
    # 'lZzJYA2HHeSKklfYFiooxQ',
    # '9lzUbppytzgrf6maaTR0Ng',
    # 'nVAJZ6BJ9PPlxDXn976R6A',
    # '2A3fwLRM7J6pffKgJT6PvA',
    # 'mS8ZyLZjYhB42ts9_8j3vg',
    # 'riyuHVzHRLrP798mfhvuLQ',
    # '2ZovqwQWxWuvrbA5zx5bJQ',
    # 'Gmkfors9fSxUKcJKSX0BRQ',
    # 'rFP41LryXOyizCuMPjjw1A',
    # 'okSpbU86tbKULQtz3vT-Bw',
    # 'y9Y34uFeinwjlstszhx_1w',
    # 'uI-dbKk_9cUen7pi3-16Sg',
    # '1tAV9cvU8eaet_FUqqZXhA',
    # '1tNVPumjvFErYjvSXbOQ6Q',
    # 'VOAO6ip7GwK4McQZbRa60g',
    # 'q9YDiEnpSzuFdh-QTi8Rhw',
    # '1u6-Fy87nmWyGlG0VA1jqQ',
    # 'AyJTl-fpL6XamoECaSpcnA',
    # '387XEwERYeyodpV5DWR4hA',
    # 'GQCmcU4aD6GEq7Eo7pKqUg',
    # 'j-QJq-qiZU_6iRQ1a2innQ',
    # 'zBlh5vP_qkSNR5Cc6lWG4w',
    # 'MR-oGBw4MLDoqAwS6TaYZw',
    # 'IuS8Si2f_CCtNibHTPD7RA',
    # 'l3EkLGreTXChG0TQHyo2ow',
    # 'ouTdW9cEZoer60mENUesPQ',
    # 'MQlJrXuMAkTtWQQU_nszLQ',
    # 'rUq7zZc-dWzC9H3KOPnsMQ',
    # 'KSkjE3krqsovBs7iC4x7ng',
    # 'WUwSC6YDIplLPYucqIQIFg',
    # 'LOyGm5Q6zdTHdntLBUyBrg',
    # 'Ym4qZJDUFz42rs0FCKJ7kw',
    # 'lYv2-FaGQBhZnVxTb3Qc5Q',
    # 'sNn7E_l6jb2WXyzUd-j7Kw',
    # 'DbPsnVXYkmZyP7HGnopJfA',
    # 'qIPgQSnQLWUnG_DuVyZbZA',
    # 'nhjYGdlR5Yw5-uOQqCVF8A',
    # 'gnfRPDNr9aRaEMDh1zAl_w',
    # 'Lz0AJ2Hzr1ITh160NAnMoQ',
    # 'xQIuQz-6i28ekYCNKQZvig',
    # 'bw_bCNXNBrgarlmrgURkoA',
    # '4pxK5njPxYHFp7IMEch1Bw',
    # '94GNGMxmruuqRLRhLqllWw',
    # 'F7mv0e3N2DgYY93cl8LpZw',
    # '5tiXpKNobwttA5uYB16ttA',
    # 'EX8EyU43VF7DwS7jKEnjvg',
    # 'xYxAJFjQBTgIcMLyiIIh-g',
    # 'w6-qlTncaWlSxTJwK_HvfQ',
    # 'eNMNXsMjT_PJ5sslcmoYQQ',
    # 'tb4uP6nnel0veA_hvFmr6Q',
    # 'VsnsZkqEG_gg6Gsg7NdDhA',
    # 'RpNJRmL8qcWQgIyvt-DDSg',
    # 'lhsETIUHGR1aOx8b0M0hPQ',
    # '85gYSNxRpFIbQ3JVcudsVw',
    # 'RAB3yrNwTiFYe4zpKs9tgA',
    # 'grf5Gmn_GAh8ImHTi3HLPg',
    # 'zdsWFwFtmZRZJ50HnwPAxQ',
    # 'qgkN8Slt0WKVx_RETVFN_A',
    # '1qukytvAndMQU2QeIE1KLw',
    # 'DcD4NnR24iiUj7w6Q6hxzA',
    # 'QzvLnOqwH6BIY_jCOvzuQQ',
    # 'EgGdnaotJpPvxCFyZPJeUw',
    # 'LGiUTYgKIYnBBbc6kp6ALg',
    # 'L4PI4kh8plShtrcWt6aBTQ',
    # 'WY630Bgo202sOpiT57EN5g',
    # 'kxr3yoJijtkzqyWu7zJzqg',
    # 'IuSx68tb7iZa-aAeknXp8A',
    # 'dj6nbGIqguJDXgz49nmFBw',
    # 'Rmw9HB35S9qobQKN6bXgmA',
    # 'UgcPEMKI7vEIT27rzBIqoA',
    # 'pQL52VHs4i3-y7zq81kFng',
    # 'MMfVS56z0AZXbO3C9vHbVg',
    # 'WNSdjFgR3vjeDQl7rKEGNg',
    # 'IJUCRd5v-XLkcGrKjb8IfA',
    # 'p7Y09Xv3wDUyROO00UhzNQ',
    # 'NEi3BV_jrU8D9G0Qy6zmCg',
    # '3sXlZWM9B72_r-dYBIgmyg',
    # 'GcqBRZ3_PcSelMCUOeuxdQ',
    # 'biFv9mXsP0V4omBUy1Z-MA',
    # 'm2tNrjQJz2fxCyh-yp4vgA',
    # 'VIxWlFefTnFQPkAvDNURjg',
    # '-Bf8BQ3yMk8U2f45r2DRKw',
    # 'PVVb9lGS00W2GoCfBb9o4g',
    # '0R4QFh47DR6M9M0tdyGRyg',
    # 'Zvnm7o2eMaYAEHS8YRn_EQ',
    # 'oOFkUpr-0e4V50jot7pvRQ',
    # 'Z6PHrbbjuUyaRqc5cauWNg',
    # 'py85NxzGJTNfeQvqrKY_GA',
    # 'Le6-DgPItk8rCBiwST2bJQ',
    # 'Zrx25j1M794Nh8fUGB8E9A',
    # 'gxzd4hEDn3QvmVR5CUw4SA',
    # 'qKY8-WEvvNAhxGI7onZexA',
    # 'O7D3kO1YMq3xfQG4sasZcA',
    # 'Forh8ReS4pbs9PAIzcRpLA',
    # 'gQ9qXrLNnowN6YrGhJFTYQ',
    # 'McISmBl9ELUpzY9g3Fhz9A',
    # 'rM73z7YU9M-U0HLP62XCZQ',
    # 'bR9teBBRApqD5pSKj6tZ_w',
    # 'fsTyQVRjkR7tPGI_FzfCKA',
    # 'gaV_IfrK2X2Lc_BNSobKOQ',
    # 'JvGuHf0wIfpzY5WNeBlFvQ',
    # 'JpssdgvmNjfBpjIhZMgICA',
    # 'maIBbvZ65cUu7ZOw4cb6rA',
    # 'fjndTT0BWqI-I-3Yc1EWjQ',
    # 'OoykQO4g9nuOQi3rlp5WJQ',
    # 'pvLUYFU0zF7ADbK0sPkslg',
    # 'R046YEcl0Gp0tWyZdJ5DEg',
    # 'hitpsDvCvgajUbSHxaUDlg',
    # 'rQ9zKk0So6EFT5WR1TAzfQ',
    # 'pYL6JqKtqlMNXbWonw3yNA',
    # 'njAKI1RSggY0Izay-xwJSw',
    # 'HfxMovSXJZVqL514iUD02g',
    # '6GlGdRX8JaG9alaqZAOaTQ',
    # 'rF74jsFqy6L7pBetZOJxLw',
    # 'o9thrb4UrI4NJ6CGOAXb5g',
    # '_ZfjpSEO5ntk-1hbnwCR4g',
    # 'V6u7__4jbEDOgWR8K6qUSw',
    # 'EBfuq8ctwTXN3Pv4ALOAyA',
    # 'rtbWB7eRFWeiKyMf7ZozRw',
    # 'W0oH-WXVdQj98XJ9Obn82Q',
    # 'Lb9rNNCbF6gL5EM6znWJUA',
    # 'U9nXdynQ2YR5xYx8tM3S7w',
    # 'mElvCnwgjUFwWRWCMxlz9A',
    # 'a44h5KtCKxN6L7ScrE63HQ',
    # 'T3rBg9LEj_R1mb7C_-0Gwg',
    # 'CZopYW_jT22mOPEDofWQ4A',
    # '4d9BIUYJwAsMfMrH_0vdDQ',
    # 'sOf5D_Dw3fu5RVz3K-M6_A',
    # '5CWcqiwAlEuH3rgm9JzUnw',
    # 'FBvdo2I6705bTQXgiOdEoQ',
    # 'FEEJ4rK8EZ7cqIvBM5luGg',
    # 'pojpO8l6ulkpV_ezealGRQ',
    # 'Q4EY9R9y3_libPmpQgqdRQ',
    # 'OBvPj3NiXxt47fjsQ0edsQ',
    # 'Ax7qOxh1OKvBOvX_iFRKRw',
    # '0QzCeORfF8EY34UODWRV9A',
    # 'z6puJBjp677RIcu8pQbjFA',
    # 'zvQIEpJUmLLmMMffNntHXQ',
    # '4SPd65eJ1K0KiBPvXpo50A',
    # 'Bl7K6qsJDdSaLZs7eKlufw',
    # 'gRCEObNuHtI61xR32ytqNQ',
    # 'yR0Luqz_CEw7sPUbOXDUZw',
    # 'rTN9PfZFa3vmfyPZd-u9sw',
    # 'OuX1Fi_NP5ydXvOYcq-XCA',
    # 'ZpjAltpV8mq-HGqsipocsA',
    # 'l7WbUuszqp4k4rUh7ieNIA',
    # 'TT2rWu9-MsoxL53F9Wr8Tg',
    # 'VE5KGq9ztCztivwbmjNlTQ',
    # '4QmwJBk9VPKyO2DfUeIVWg',
    # '8N5KG-iuAJrPVL6awBzBaQ',
    # 'DxzAGrpddzgGmdtNBHgi8g',
    # 'qcb6jpnIuEKHXbu4woKUFw',
    # 'oI11Y5AZscmmn12Yv3PinQ',
    # 'xdIaJk3UYOnt-SWAz_ZKqg',
    # 'wpHN9iLlhn_z613xJd5uyA',
    # '0ps5B5C6oNaRsGyUJzFCuw',
    # 'ktJR5j14AH-Cc45J7jJ9nw',
    # 'vzx1WdVivFsaN4QYrez2rw',
    # 'kRRtnGLDTTfKyeuwjh8Blg',
    # 'RlWKtC4DZaL240cJkaaRBA',
    # 'APIbThZ8PYfWsdK4Z0D5Rg',
    # '19lr9xcN3Ud0w0UX7bl6Qw',
    # 'lAqzgJwOQmthdZWpiIcmuQ',
    # 'AztVIokc5VtP4m8r6kSnWw',
    # 'sPQ3i5lI2Tg8pbmqbDaZZw',
    # 'U33yMM_-xV-qYLKb1LGLPQ',
    # '5mair616AhJMpRjbd5z94g',
    # 'M3_5NSkpAXsvN2g4Bqrcsg',
    # '2bSyNMam79SlwiHwQD6RGg',
    # 'A3Zj-YXGAhgsiYT4RTCKwQ',
    # 'F_grYTnIPE1_Wwlfvt0J4Q',
    # 'Ozy5LlmU0k-mVs7RXNisZQ',
    # 'tIRn9YlrJ4Y5IyHzY72i9A',
    # 'YyxB3K1ORzc7ChMKgyxm9Q',
    # 'CsVCUymHT99HjyLuHNtUjA',
    # 'ivXSATui5znHvRuVExj3vw',
    # 'lqPuSiWypNCACEMhArSZ2A',
    # '4l1cmNrXBOLVUJR29MDp3A',
    # 'gLwCxZW5KHUSzEDuGP8mDw',
    # 'JrTBWai2-Cu8FPJhDJiiLw',
    # '1h3ysSuSazvXc1aeLiiOew',
    # 'Em_U9esTgiJfb9kIZL36kw',
    # '1k7CVCUJoE4ZJAtGpGGUUA',
    # 'gBHFF3xGzN1_ZIOfmN_lzw',
    # 'rReN_exlBKL3XqYnck3ndA',
    # 'zCpFWnrtttP7vKZIuyClVA',
    # 'pvrTxY4WCE5DfHAIMLjSbg',
    # 'WlqxMI84U-Cku3Qs-tJUJQ',
    # 'DGX2ldVGub9F1EAU9R7C5A',
    # 'vovAmbZ38jWTb5GfiQoSPw',
    # '19umlhmVB9O3njIBfRAe8g',
    # 'A5Rkh7UymKm0_Rxm9K2PJw',
    # 'iACo0RlJN6PGJez9oaK-tA',
    # 'T3ASfec34b8-uYr3xZj8Lw',
    # 'rFISXBrHNGywTL0l-VxqPA',
    # '_e5KDltp_0XNkylTYR1V2w',
    # 'PSehpYrCFJ11-Z82w2JChA',
    # 'j0biI-MkzcQSBcx7w7QjgA',
    # 'y8d90Pt16Nip-B5UXWBP-w',
    # '9cYiV5u-MRi1tghJlzbcFA',
    # 'fe8_IsDmaMkfvvVEBnV5nQ',
    # 'y5KAK-uNq1M-cOuqLq2t1g',
    # 'RC4oyPNX3FVTCfxsDeJI6A',
    # 'uXIuRu-BANuzBkzKtu3XnA',
    # 'hroo5nOO8b9QhHX0GLg7oA',
    # 'upgjUq616Yz1IvAvysDLWA',
    # '4pICa9qPtJj_7OdgU2zRog',
    # 'cHtJHU0iMongcIQvjXVhCw',
    # 'ybijRruF5Cv5s26PPvPp7Q',
    # 'LrRpuxuN1hPb1YVT9WRNXg',
    # 'f5DD_VW9YipLr7fvIOY9Eg',
    # 'O_YSJEMk2GzcmnwXWBj74g',
    # 'QPHU1AE3Fpxjhfiinv2LZg',
    # 'upxEHDxnEPwuts9xY0ylng',
    # 'FMBL6Te_BaMc_WWCMfYmmA',
    # 'H5Y6o9H4rtxbHJFgLqI6Fw',
    # 'f8IMQgRwo-8GP372MElDGQ',
    # 'J0ufK7WAEq6oAdpDFz2xVA',
    # 'cqjqc8pd3SCxTDWiH49Q5Q',
    # 'ohqeJybL1FuFzN4P8pwxhg',
    # 'wwgRu0TAMX8rfRhsiI0ifQ',
    # 'gtqtnzgzDCWVFi298dIvow',
    # 'T8jY7FB0JEK62CwOeXBa9w',
    # 'rTZVcJZ8G80i6NjLw0SW8Q',
    # 'LcTlT1Uf6XckMjWwRr49sQ',
    # 'MdmfvSjRKE048PUP75CRog',
    # 'vAbRNF0hJt91oCUpm_sdKw',
    # 'cPmThZ7Ugpd8eJnIObOy0Q',
    # '7gjYJ6leqm2IMJXNpKvIlw',
    # 'SOXkCLHHPMM32QNVV9VuJQ',
    # 'qpdMFF6Y31ZAtE1R1OLsfA',
    # 'kpnqoFaf0n1s8aI6wQ3Tbg',
    # 'LDMCrFlGIFUN6L-FEFgzWg',
    # '5c-b0ALS_DyLvRCGrlCTjA',
    # '16tWXenJ1wTqugXJU7yiZg',
    # 'jlpseJr1CS8aCMieENkQ8g',
    # '-3AVh1GtLRc-HOwORLuzaQ',
    # '-FcZY7a7qgxTUlTvwuyJnQ',
    # 'gKFDJ9IpFxt95DHxTN7ZHw',
    # 'AiXzyI2Xehh-1yvbB-WcYw',
    # 'OjmBJUF5r2XIBKpFGTfJlA',
    # 'eor-8FeKLBLo_7RM_08zVQ',
    # '_jsxUnZ8Iq8_kZNQcnzyrQ',
    # '0pIhgokp0NeM9h8oQQULOg',
    # '4lAwPgy1m9Rd0oBpi4Hr2w',
    # 'kkQxwd2nVlHs1C4fdoAxOg',
    # 'kF6HvWkfudAeE8KPvPX8dw',
    # 'w0XjeV4WIUskQy8wwQf40w',
    # 'BtYuTPMgUTlBmNSeUxQYDA',
    # 'D3SphPFz2cXzqGiI0LuwUw',
    # 'q9wNJpZd1bx22PDpAbwZsA',
    # '7ZUYzw56X2WPcjmEWI6zIA',
    # 'OhgE2mMH87lprARlAK9SlQ',
    # 'XTj3lFJgX7rFYuwjnb4ETw',
    # 'YzuWj3u9BZRpxNmd1Cv3QA',
    # '0p27EjcNwTI7Ey4K_MNPww',
    # 'gg1Qw0HhF47DCRth8jUY0A',
    # 'mAplaiZdCO9mN-lXXTeU5Q',
    # '13wmyZRdtBB5FYsJ02KmdQ',
    # 'MGwWap1dAOOyVo3xtpC2zQ',
    # 'UicG-oyX4bjmcQbmXn7hGw',
    # 'Pdf3z2H5a9YHq0Slcv9KgQ',
    # 'U62f1Ty-NYh7jtH3Yb8tmQ',
    # 'WCl3rZyr2fmNX6KJLsTg4A',
    # 'Wg9272hxpu9IBTXMTB6EeQ',
    # 'yPPc_6WzJfxAG4ybfheO4A',
    # '60k9jrzsQ-uO8dlQuUIjQg',
    # 'Cxd0CSaDsCmPqSCFkQDfIQ',
    # 'XH4jDFKyeCI7qkKq6PB9Nw',
    # 'p0iEUamJVp_QpaheE-Nz_g',
    # 'ejpYxAVXIaeGUGu8amY0gQ',
    # 'JzmJCDSJ_35kJgAlxcZDqQ',
    # 'qbNlcvt5Z1KGbzlw_LqaIA',
    # 'vDhifJNAtVFGjqJM5hFQkg',
    # 'i_3XZCoSsqYQ_HRLTG1QKg',
    # 'w4yq1IRk0DHQE995giqjGg',
    # '25PEf9-e8_7phdV7JjOHhA',
    # '_5YnAQRM1fJjKP8IenNKEA',
    # 'qbHkhEuOkgmMOOttedGJ8A',
    # '-WfV03-dVE3HSMUmg0tnvQ',
    # 'RhEvP5flF6KoPriMHmVYGg',
    # 'ZvTQVEcRg0CTGeI1YGE_Kg',
    # 'PpHnxQaRP2JNjJODQDX9GA',
    # 'OlVNiHr8FTDRQzsIxpLgMQ',
    # 'E970Ph1RCRjHWnZge_TylQ',
    # 'anrLWKAKm3hFLcJpbhEDUg',
    # '9iCgfQ7ffWtroHbde7q-pQ',
    # 'inGBRPre0JUFC30qxn9o-w',
    # 'iNaF4jp5PdMFSTLaulidcQ',
    # 'Qq05Y-UHcsEFXql-0IMUzA',
    # 'H-05-lRUJDUNDgYgaw7bXA',
    # 'kgffcoxT6BQp-gJ-UQ7Czw',
    # 'qNL6VUnwB_knODEpZV-F2w',
    # 'wK8XNb8swzQJrru35cVJow',
    # '20htfKeteS2n4KYyVAZF4w',
    # 'If6Bku2jkgPiikR6HBu-XQ',
    # 'a6ZDQ3prZvEtYNFFYM1t4A',
    # '4WS9os_Dj5nckxeNsva6Vg',
    # 'fJVrLAFaqcvzt1QAw12Uxw',
    # 'viji5rHhNlsy9w-JmUhyaw',
    # 'FtaTjyMUIY457tPJahjg1A',
    # 'JzhcaFaLW_YCeg4TfwOV8A',
    # '9uRrzqQaq9XwW9lLj7oBxw',
    # '9xMM3pGCokNTvC6Ao3PByw',
    # 'pUefPUl0plnvk90r_00DOw',
    # 'pzcqjJ3iBfjQyt8PzgHsYQ',
    # 'z7IEawyWhsdjc-7clTJWUQ',
    # 'yz2EimDE7bBvq6b4mDe_zg',
    # 'nRoe03g-KxuWdehlVsfZLw',
    # 'iT0YmSRHLJbGgG_4aGzfdg',
    # 'mLA7V2VDQ9u1rTR_hSM-1g',
    # 'd2rFJ3_8ux87uyZVFGmlag',
    # 'h9PXbwY6E3LINCYan2zcsg',
    # 'insFaJ9N3H7-_x3WVxTCVQ',
    # 'Pg08gKwJApGWoHtnq3aWqw',
    # 'QuZ_QZbW6Th-SouyQyCJ2A',
    # 'EDHGSQVfjEWI_VCURz84eg',
    # 'oYPpWHgsjcIt-tUzGXk_eA',
    # 'fL2vdjn-ApNcsVntxtg4Dg',
    # 'd3waAgtF1Jb1pYa6wwp4Ig',
    # 'uo7nq-4J7A80a0t2a-55JQ',
    # '-mxLiV-6TOP2IqJ0gvbjZw',
    # 'Hrl5-9QbkeEjbPLISPNAvQ',
    # 'n-__s2zvTUb_JlWP1knC1A',
    # 'uJ5vD6cY3K9Fi1Yh5WlAHQ',
    # 'pEzLtBG0AaaYaFxphG45cA',
    # 'pbeRNz7IU9rBqDOJcJf6LQ',
    # '_miMpqv-9ay174DfRopwpg',
    # 'mzGblv2PjwE0n55McHYi-Q',
    # 'oXirKyQ43p2SceyagXo9JQ',
    # '_pO7Zltws0aPSKff0EQyqA',
    # '4aAf2nAr86lcDHzqWSaYuQ',
    # 'fU_R960ntHkdpPgbMltHoA',
    # 'iXjuDp2vlAC6Nvfw4Hlzkw',
    # 'p1xvtfpcue1e7hI3SCeA9w',
    # 'W-3Sy3fy85mQdd0ZNFKIiw',
    # 'pF_gxyS76K39-nuu3P7okw',
    # 'b9lGo4hvKBFravd3iSNN9g',
    # 'ajoqEHnCZTD8-8GqGLq9-Q',
    # 'L8DjPYqG-WK3fIQ6s-dCiw',
    # 'm97jaBYRscg-hqDjMVIIWg',
    # 'DtdVE6har1N5TvdK8vclfg',
    # 'f_DnhukOHbKbR8vFHDUDaA',
    # '8bYXg27QEoAx7us15eIL5g',
    # '7w9GpK5BJZY94sbfK__oDw',
    # '86stmK3Vm2f5W6PdyvuLrQ',
    # '7K4qzp71DD6vJAgKdv0V_g',
    # 'jggN5klkHvj_hcV9JuSi4g',
    # '0j7VWa5uGebj_94C1K2i2g',
    # 'L4UUcBtjxxOMwCYP2Xl1pg',
    # 'yNaslgj6ITfsn24iorlxMg',
    # 'z8XIldYr65CKOz8yOI5R8A',
    # '0fXgOPDJi1oxq7ta_IhrKA',
    # '5Q95IfYIbP6vXz4wjtYWFw',
    # 'jQJYvzUFsz9ytI1AzW0dyQ',
    # 'DrVbzSA2zCDuL7QblI4gzw',
    # 'ezl2anYfiGDuPM_X-S-rcQ',
    # 'HKSyA7YZplj9i_vIdtwyzg',
    # 'TlHb32WGt1gFfOv8-6q25g',
    # 'bHGxQS3wfX93sMFOuR6xDw',
    # 'BeU1l-R-liINQX6t1pBB-g',
    # 'U-Z5TWM2GDUXG6tBrvdcWQ',
    # '84DjKzaR26vphu9fNI9nKg',
    # 'MDVbJicJvqaO4WGx0vEabQ',
    # 'lAADTWyB91S2Ch0iWqbh1w',
    # '41WfL6MGTAXYgRQfNT3dyA',
    # 'W89O839U_VvgTqJ5aPK6ZQ',
    # 'ruH7MFlSuDua1SuxupNgMw',
    # 'T8iUsZ3nUXC94VEaL-_f2g',
    # 'ncEJaX_79zZGSS1NQNzu4A',
    # '72HxE_cBs8mQC2ONF22G0g',
    # 'BZF2OHvrkW5tWgRXvmTGdg',
    # 'PYDw2RbDoO9DzuIapgI6-w',
    # 'hMYqz6Nn1ZIlYBZm1NYp8Q',
    # 'XwQ6lQro2FKvtD0YAUeOAA',
    # 'K9yAEnIoJ5AG6Wj7nCVZWA',
    # 'nn5z7c6aLZZbaN8Vvvx2uw',
    # 'ubohTuCR5-Zst2u9N25kxw',
    # 'zp9AJ1G-nlh_b9gN4QOuAg',
    # 'gxAePV_hN-8VGcJAUp8BJw',
    # 'mlkVAm2DkGnKnNVR1AnQLA',
    # 'DnQeRQH6IF6i6qLwtn0S7g',
    # 'v3ybDyHbimhQYS2ACbFRHA',
    # 'E2FuxOUs1T1qqKtmq6Gj-A',
    # 'gN8vZOCQnkJbjQEcoLRH8Q',
    # '1P6s9Jk4JJGqwD4tsxmSUQ',
    # 'FszzbwebTzkO8fxgq6H7qA',
    # 'ZriDpPXjStMI-uBUkovVUQ',
    # '_iySw-CXvA2wx0sn8pRiAA',
    # '-ipc5f0XiXwH3hbNnro54Q',
    # 'fu9pEC4uYZOo4JbD9lLL5g',
    # 'mBv6NDaN1HXEpSP9zmOyXQ',
    # 'k4GyGL2er4PvQ4Cc8XZJqA',
    # 'WUdQQqV_U3K8RlPUekm72w',
    # 'uQ9UFPVKRP0G6mHm6Q19ng',
    # 'P-RZguMHa0viSWg5TRQE1Q',
    # '_kp4GpBKV1uEmCCIFylOQg',
    # '7Zy5LURpW0VwmXqdJZjP3w',
    # 'inS7ktccdZ872STktOzAtg',
    # 'foPp-aKIZsWcsYf5zuhcNw',
    # 'mXA3MeNsPYkmZBaOyh3qfg',
    # 'WpAzZ7eT6fb3UFccQv32ug',
    # 'jLkowt2UH0d-L81NDndaxA',
    # 'HexCnP_tQFgXH6QD9UlJWw',
    # 'tXVx6Uo36MW6Yy-wMrS1Hw',
    # '6Ve_2kEz18dvhp4q3M5I2Q',
    # '14UPvbDf13zKWim68HsHdQ',
    # 'Hk0oRsqZa1tl7k0pPTj02A',
    # 'VHog5lSuIMqYH95ZqqOGEg',
    # 'VkECNTcZZ1mdN-VJltJcWA',
    # 'roVq6RWnDGrAsx2UiWaQtg',
    # 'MFQylpIgFrJSMUgI_wva4Q',
    # 'ceMz-Zvx0ldxQfz-tcjI3w',
    # 'OWMuTtopP_z7HsxS7A94vQ',
    # 'v7mc9J-CL8N_IB-M7Trmbg',
    # 'TxYq9LvtvYgi-zfOT6h_rQ',
    # 'Rmcizn6Ke9gThABUmzGmAw',
    # 'cZBCVzd4lg_jx8IiFz-Iag',
    # 'nmWLUc5MmX3FLLVmK4fVHQ',
    # '5ySPRobQHzXgoVOIXZattw',
    # 'ez_N6Q_ZAFcegjoTXYQ0oQ',
    # 'CtKHpbNOmzbh_4W349eObQ',
    # 'YEj6YVRzYFYkV_jsca7F4w',
    # 'QPeZUmMqqfl8P0RMe4JETA',
    # 'GIzVp-IWJFF9Jpxy4dvLGw',
    # 'H19dU7CRjqCKMGrsG2BikA',
    # 'H2n59pWvRaowvUK-Xw98YA',
    # 'nvBhlpH8TWbCl70_30gqxg',
    # 'JsCKeWHA8n_5mFQ3F6t4UA',
    # '99J_T7NS-Wojhl5JVqnSxw',
    # 'e30eDWr9QyLEsD5EIQW-TQ',
    # 'kYtk8YSBtSuwXcvfoRMyoA',
    # 'gndFFwW-jmC76cEh5-s0Rw',
    # 'tByEVAaHu9Vm33deijKQBw',
    # '2fqHO2vFbcwVV27c_Irm8Q',
    # 'RORj058dhJGPOvoOMDU8rg',
    # 'Qb4sJ4ssSX1clY2wEAOmsA',
    # '5tl4tyaJEzGeAdbi_L7PzQ',
    # 'irVqdCcmeO_Qhz8YcwaxOA',
    # 'u54Hx0VmPRzOtwvBShonSA',
    # 'spCzs32TMQpRCJbJfArZng',
    # 'rS0ReiIhmugq3UcK_7aGAQ',
    # 'juMGlVODD52yam7hCE5P7Q',
    # 'MND3wvN57mSEBoZiuaqtmg',
    # 'tcnGHnLRyDmKviWLNFfGcA',
    # 'O589S0opFB9oK8VcL5tRcA',
    # 'Aq4CJv-yf10SgldWGIh10w',
    # 'UoPOED2pSAQjf4Gz4gYtqw',
    # 'GiAV7-9gmkX0IFTn0nSqVw',
    # 'iSC_NslJHJTtwoaKn6kggw',
    # 'yR-SdS2qU7xlERx8CPHYbg',
    # '24S-aiManGfjbb-fwwi2VQ',
    # 'O7z7Qb0oOcVkrClpmkhyAg',
    # 'bAhgP8iVP7gw26KjpZ1miw',
    # 'D2t3yDnG-HI17YOsiiWIuw',
    # 'XfHUMPMSiVHqQ9-u2ZisLg',
    # 'qRhxldX3lnOMJUNlytYvfQ',
    # '8sN_Xq-GSu3g59R1sHTwEQ',
    # 'Uut2Y-n5eMO6qIn7tvEYKA',
    # '60YMDriyoqeimFOjHXCUoQ',
    # 'SqLC_ofxVbYj6ciz2AboGw',
    # 'I4Nr-MVc26qWr08-S3Q1ow',
    # 'vQMfgU9az5y0vULI3gzR-g',
    # '1ufk_GFAX_5foAZnbM_U6A',
    # 'MdafQfoV_6WrtiQRsupxZg',
    # 'wCbthQTUiLOWhtMEDfvhYA',
    # 'X0Tczp3XH3qTinliAM5TEA',
    # 'Hz6pXloEBWboBaJuEpk0JQ',
    # 'LxPNKVBrbqIHog3MI-rkDQ',
    # 'kePOQesdciZkNi8jJkolCg',
    # 'vMW9nrFdRDgGTjY-zQOtug',
    # 'rr0Vw5mvBhyz6ZWmXgcp5A',
    # 'G80cs2ZxLzjUkMutWdXU1w',
    # '20n09j__6xb7JX0xe9Oo9A',
    # 'Ke0nQzmHSGTdSqmagaNr4Q',
    # 'xuyxzzxXta5yGAAn5b8CjQ',
    # 'laSyDWzuKb1wo1XWFEUsWQ',
    # 'K8MWIwCrS5w-Dbi9UHOlhw',
    # 'B8Wqz8w7kKvMjZIbr2yUZg',
    # 'KaDO3aIp9pe2XePIHF2qow',
    # 'WLblFINiPI18_o1OdDsnVg',
    # 'VkIzEMkmBub8rWa3-kpY6w',
    # '5eyMV7PEPqF4-K8hR-7OJg',
    # 'kOo4ZY2UQAX4j312mzQ8mA',
    # 'OtSbxxD-WNzlNQlDGpXFSA',
    # 'llZrbubcGWC-kXShnJLyQg',
    # '9WeJvvyT-j3btKwvTXyzjw',
    # '6i85_hLuAdymNIy01LLl0g',
    # '9X9YlZs9eOCwo5E5Qdrt4Q',
    # 'qi6uzJEhA9puZM2io46-_A',
    # '793LPDn8axywoOANbDeAZw',
    # '-5gSPcauy5_JCQeHiJgFmw',
    # 'ifmVI9Hw03jPcb5Vkt3GHw',
    # 'ZsnSiQY8c0bzyx7RfVrEKw',
    # 'KhWl4Mwhm_Oqq0zIIz-0wQ',
    # '6zuRum92Zg4G__ml6NceKg',
    # '2UpJ2Zoyn2FD5ZcIRC-KsA',
    # 'dciKn2Otp8nAMi4AurPjsg',
    # '0ueq5zB3NqLbh93KYYNIHQ',
    # 'gsjxrwdHqKdTeNx3GeDKNQ',
    # 'GKDE-oe6ghowwSJoiyS1MQ',
    # 'BS4u8wkRb70FDBZcYkJ9kQ',
    # '011ayCokCnktQPSx-uL_SA',
    # 'XrR41SdmAlPJ__02noDrEQ',
    # 'TVbVii4EUQt9DG7y698zIw',
    # 'p4JsD_Ya0NRXNdnhbVBs0A',
    # 'p86G_6hFYVHyKhV5UdN2Kw',
    # 'OquXguWr9eR81NYVdlZrjg',
    # 'Bi-_c48HVca1Mqr0Kt7CqQ',
    # 'O9LDS66IUKIBkGz_uFZKWQ',
    # '5JjGTaZkHbbjBrzBODcsAQ',
    # 'zmL2A5_BoZjuYxpeFHCKag',
    # 'ZB4ViCkUyJ4j-cJjOQ-N4A',
    # 'NdUuGRxEH0waBQbL6R7mmg',
    # 'v0hcBPtVF2Fny5NvSIwYAg',
    # 'k3DxvgTAsSgsGCTQdS2XOg',
    # '9xWpBYYOxTPaVQKL3J8lMw',
    # 'gH0E4kqHaWjxoRtin7dmKA',
    # 'xmeEyBVC5zN-FCX5qZviIQ',
    # 'ARc6rfAJP0T55EVWfvB1hQ',
    # 'Zuum83dPf7zOdiz-n1g3qQ',
    # '-OMfcRwzGjiD1lpMIknQ1Q',
    # '5aMVKiH5vODUepTcdj_6Tw',
    # 'BuGweXjpqEo_5ovBHd-7zQ',
    # 'eYLm3CXaFqtcm9YM0tmpMQ',
    # '66jwLkSd6M0cZulZrA3zcw',
    # '6bgjcFOy4WHMyw62_1V9Pw',
    # 'TRlBYLf4CxFBaGE-9FLOtA',
    # '77E4DyB5vbOW8YFzM_IA3w',
    # '2aoKv8DjAeVBjTT9O9sx5g',
    # 'UsyEZA4viJrD4tvCBoDkgg',
    # '3iu_3Ip1m4QLTutHdRmc4w',
    # 'rIGPzxycWfmGQS3RHpVaNA',
    # 'GAHgckpM3pLmmqItg6afcA',
    # 'Zu2noPit8SBq7Uybvy42PA',
    # 'U0zQSGqRlj8YzC2Tlzmj8A',
    # '5llCyMtS_WyUVKXCtpdaJQ',
    # 'DW0ZvWuYaSvMcB_3LG5RGg',
    # 'OpG0xj_aZQEv1Ac_Zy5MBg',
    # 'ymwUAvCK7Qmf3IX58XqLGw',
    # 'tAdgAmRZnAOvCipAr2trqQ',
    # 'oudIKQI8HjqJqiF9pnMmQw',
    # 'TAhl8VtT9r3T-8PhO8imJQ',
    # 'kk3nsVOeVyN8tojFHEu6NA',
    # 'Jfnb9IDQ326omYqA-buX_w',
    # 'RkOguMKU13hPglELb6t2Vg',
    # '0wr58lAX4e_UX0CZfeEoKA',
    # 'NQauHAQNg_a0z8WndFY3Wg',
    # 'WJ_zJkio3RZB5FvWAzFkTQ',
    # 'XBlUgpFOvm05WSCgErQ_Ow',
    # 'gMhjH8HeoiGDmvm3c1-ZQQ',
    # 'QWqfGiX37F4zcrBpTq8R9Q',
    # 'eUk0SJ81Bqzf4aQvH45C8g',
    # 'YKr-1BT3IBCaXJWuQWGj0w',
    # 'caoxjCw1qg2zoT3LHU9-hw',
    # 'w4ZMXyIlCUc183W_pocHug',
    # 'qj4KHXGgwyutHpvWRLI87g',
    # 'v6QXg4TI84FKEkcYGTrcNw',
    # 'SLwhJmOFM-q2QBic061G9Q',
    # 'SBxhSh89QrWMyx_Wx_F-Cw',
    # 'js1mMgFD4DEC5tGzpp6APw',
    # 'QwK3g4oA6QIQxAdphgLHGg',
    # 'PSrITKG8En8mvwZ_YhywTg',
    # 'dO0KCBji2gSR503kp_e4-g',
    # 's19MqjZcquoj4h5-8m5C5w',
    # 'CeWu2SuUQBYnS68sgg04wA',
    # 'Gq4vf0MO5iA_vxdCs2ZeKw',
    # 'zmzQOkVe-fm0bYiYe3LTsQ',
    # 'PezBzE1cRaPcm4rq6n50KA',
    # 'sKhDrZFCJqfRNylkHrIDsQ',
    # 'ho08r5RNItiD2iKgEeocIA',
    # 'zp-K5s3pGTWuuaVBWo6WZA',
    # '60zmhS-MTHrhKIXxhSWJ4g',
    # 'hcEnLRdLcIZurxiYJ_h41w',
    # '6PXjb9T5Iv4STwwdoycrYw',
    # 'Crqj390cYtDdUbwSokzPQw',
    # 'v9200TbV-YzfG5BWN8fS3A',
    # 'RVUsquY9ozToz3Hhmohq4w',
    # '3W5VLa5iGkKyvtWehdkIMg',
    # 'ikQr8ma9SnHIKu-8xZyXWw',
    # 'k41bo3i0k-PXQAKvVOLi_g',
    # '4DuKa9IMOvKwdQxTK_YRMA',
    # 'nY9ZcdrkncyVh3ZJ4WvtwA',
    # 'yNS9sDkxDGP9DQV7ilS0NQ',
    # 'LPEHBPF6Rk5AjGYJsqjktg',
    # 'KfLDMQq1pJvZDCfVBTna1g',
    # '1vnnEE4WlCoTuToas5dnUw',
    # 'Rc20TL4mxqKhKFZgQTXqDQ',
    # 'szL4LjaGZpmsLjQ5ALmaQA',
    # 'W1rlxEJ7KmtIhRZqXFcdvQ',
    # 'g3h4E6Mqr6u0tQBRH6_6zw',
    # 'pohAeCMsGb8p4dv6I_m-Kg',
    # 'q8D-tlj8pQPXAtdUC3409w',
    # 'ik2LckGCDc0pfz14uVnAwA',
    # 'YcGwRae25JlfiD5r9S3BSA',
    # 'Njec_9rOrcVP82NeGwgzOw',
    # 'IUm5jbVbC49gAI-q2KrZLA',
    # '7bpqrYxc8kJb-zkR376RbA',
    # 'hRrrXk6VfsXpv9msPGgffg',
    # 'dX7v8PS03axhJfkPdMPEBw',
    # 'DoWL_ahE-_r-VGgULho_JA',
    # 'LsfKW67Qe_0bU4krXEkOAA',
    # '8nDEOGVVvReXFJ2zjPh4Pw',
    # 'uqo0qY32KN0wyzsB30hB5A',
    # 'xtYiHTmunjfCN2sUaQxBjA',
    # 'dX90qyHzfC4Cxh-lNBAEgQ',
    # 'hEsLl030Ncw10VKCD6g-dg',
    # 'gEjHZH--OgwXph03pVdoYg',
    # 'KYZZhLg1e5I5M4XuVMv2sg',
    # 'DQlLXcBYhKriBx0X4ssjvg',
    # '0lxyY2bwmpde2QHcnh8fZQ',
    # 'Wg91oE233AzNieNryRJYYg',
    # 'OPiPeoJiv92rENwbq76orA',
    # 'dYZqJ2S1ND9KghLIKJg71g',
    # 'AGSJRuSF_VF3rMYhgyyxSw',
    # 'lCwqJWMxvIUQt1Re_tDn4w',
    # 'OlWWHMKPSroPqnLd1I5ujg',
    # '8J4oT58-Nc-q1bpF9CRTpw',
    # 'iPvJGQDIxKeMZxxSg9U2UQ',
    # 'TJQ10Np6miUawp7a6vLMhw',
    # 'CgVdN-AlYas1_bzGqgEObA',
    # 'IU55VgrpLzVKo9sXWbTn3Q',
    # 'dT9316C_MJjATvv7GByROg',
    # 'klsBtNP-vlO3QlfPbAtTzQ',
    # 'TlrvXR6V-4_G6dFasGHUTQ',
    # 'rwfZVEomWWGb-1wrvCpRuQ',
    # 'etzDsNjkCyQBoJcU2a3U-g',
    # 'PLVJCN2p1MIkeDzIbAx9kA',
    # 'J1MVP1oGbBnKVqriX4HDuQ',
    # 'B-WEpc814hw-esInatyNOA',
    # 'lsMvf-DxBO3As2KgLHtbFw',
    # 'tDXQBKBKN-4kJnCL-BqRbA',
    # 'eAc9Vd6loOgRQolMXQt6FA')
    # ;
    # ''')
    #
    # cursor.execute(catquery)
    # cursor.fetchall()

    #df is duplicated id with each category-- next chunk of code makes df with one row for a business_id
    # cat_df = pd.read_sql(catquery, con=cnx)
    #
    # dumdums= pd.get_dummies(cat_df['category'])
    #
    # cat_cat= pd.concat([cat_df, dumdums], axis=1)
    # cat_cat= cat_cat.drop('category', axis=1)
    # groupped_cat= cat_cat.groupby('id').agg(np.sum).reset_index()

    cnx.close()

    # biz_df.to_csv('/Users/dspitzfaden/Galvanize/capstone/test/all_nevada_biz.csv')
    # review_df.to_csv('/Users/dspitzfaden/Galvanize/capstone/test/all_nevada_reviews.csv')
    # groupped_cat.to_csv('/Users/dspitzfaden/Galvanize/capstone/test/categories_for_mod.csv')
    return biz_df, review_df #, groupped_cat


if __name__ == '__main__':
    inspections_establishments_df = pd.read_csv('/Users/dspitzfaden/Galvanize/capstone/data/restaurant_establishments.csv', sep=';')
    health_inspections_df = pd.read_csv('/Users/dspitzfaden/Galvanize/capstone/data/health_inspections.csv')
    yelp_biz_df, yelp_review_df = get_yelp_data()
    print('Yelp Buisinesses: {}'.format(len(yelp_biz_df)))

    mapper = make_mapper(yelp_biz_df, inspections_establishments_df, 'address', 'address', 'name', 'restaurant_name')
    print('Matched Yelp Buisinesses: {}'.format(len(mapper)))

    yelp_reviews_with_period = match_reviews_and_inspections(mapper, health_inspections_df, yelp_review_df)

    run_model(yelp_reviews_with_period)
